<?php
/**
 * @file
 * Main EVE Recruitment module file.
 */
 
 /**
 * Return the version number.
 * 
 * x.x.x.x
 * | | | `-- Patch Version Number.
 * | | |
 * | | `---- 0 = Alpha.
 * | |       1 = Beta.
 * | |       2 = RC.
 * | |       3 = Release.
 * | |
 * | `------ Minor Version Change.
 * |
 * `-------- Major Version Change.
 */
function eve_recruitment_version() {
  return '1.0.1.0';
}

function eve_recruitment_views_api() {
	return array(
		'api' => 3,
	);
}

function eve_recruitment_permission() {
	return array(
		'add new names' => array(
			'title' => t('Add new names'),
			'description' => t('Add new names to the recruitment database.'),
		),
		'confirm sent mails' => array(
			'title' => t('Confirm sent mails'),
			'description' => t('Confirm that recruitment mails have been sent for selected individuals.'),
		),
		'view statistics' => array(
			'title' => t('View statistics'),
			'description' => t('View recruitment statistics.'),
		),
	);
}

function eve_recruitment_menu() {
  $items = array();
  $items['recruitment/names/add'] = array(
    'title' => t('Add Names'),
    'description' => t('Add names to the recruitment database.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eve_recruitment_names_add_form'),
    'access arguments' => array('add new names'),
  );
  $items['recruitment/names/mail'] = array(
    'title' => t('Send Mails'),
    'description' => t('Send mails to characters in the recruitment database.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eve_recruitment_names_mail_form'),
    'access arguments' => array('confirm sent mails'),
  );
  return $items;
}

function eve_recruitment_names_add_form($form, &$form_state) {
	$desc = t('You can paste names from the local chat into the field below. 
		A comma-separated list of names from another source will work too.');
	$form['names'] = array(
    '#type' => 'textarea',
    '#title' => t('Names to be added'),
		'#prefix' => '<p>' . $desc . '</p>',
    '#cols' => 25,
    '#rows' => 10,
    '#required' => TRUE,
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Add Names'),
  );
	$form['#attached']['css'][] = array(
		'data' => '#edit-names {width: auto;} #edit-names + .grippie {display: none;}',
		'type' => 'inline',
	);
	
  return $form;
}

function eve_recruitment_names_add_form_submit($form, &$form_state) {
	global $user;
	$name_list = $form['names']['#value'];
	// Split lines or text entries separated by commas into array elements.
	$names = preg_split("/[\r\n,]+/", $name_list, -1, PREG_SPLIT_NO_EMPTY);
	// Remove duplicates.
	$names = array_unique($names);
	// Check if names already exist in the database.
	$existing_names = db_select('eve_recruitment','r')
		->fields('r', array('name'))
		->condition('name', $names, 'IN')
		->execute()
		->fetchCol();
	// Identify new names.
	$new_names = array_diff($names, $existing_names);
	// Add new names to the database.
	if (isset($new_names)) {
		foreach ($new_names as $name) {
			db_insert('eve_recruitment')->fields(array(
				'name' => trim($name),
				'added_date' => REQUEST_TIME,
				'added_by' => $user->uid,
			))->execute();	
		}
		$added = t('Added @new new names to the database.', array('@new' => count($new_names)));
		$skipped = '';
		$count = count($existing_names);
		if ($count > 0) {
			$skipped = t('Skipped @old existing names.', array('@old' => count($existing_names)));
		}
		drupal_set_message($added.' '.$skipped);
	}
}

function eve_recruitment_names_mail_form($form, &$form_state) {
	global $user;
	// Prepare a condition ignoring records locked by others.
	$no_lock = db_or()
		->condition('lock_time', REQUEST_TIME - 5 * 60, '<') // 5-minute lock
		->condition('lock_time', NULL)
		->condition('locked_by', $user->uid);
	// Get a batch of 20 names to be mailed.
	$names = db_select('eve_recruitment','r')
		->fields('r', array('name'))
		->condition('mailed_date', NULL)
		->condition($no_lock)
		->range(0, 20)
		->execute()
		->fetchCol();
	// Lock the names to prevent parallel edits.
	if (count($names) > 0) {
		db_update('eve_recruitment')
			->fields(array(
				'locked_by' => $user->uid,
				'lock_time' => REQUEST_TIME,
			))
			->condition('name', $names, 'IN')
			->execute();
		// Put the list in a comma-separated string with HTML markup.
		$i = 0;
		$mail_list = '';
		foreach ($names as $name) {
			if ($i == 0) {
				$mail_list .= $name;
			} else {
				$mail_list .= ', ' . $name;
			}
			$i++;
		}
		$desc = t('Send the recruitment email to the distribution list below and click the Confirm button after it is done. 
			These names are locked by you for 5 minutes to prevent other recruiters from sending duplicate mails.');
		// Pass the names mailed to the form submission handler.
		$form['names'] = array(
			'#type' => 'hidden',
			'#prefix' => '<p>'.$desc.'</p>',
			'#value' => $names,
		);
		$form['name_display'] = array(
			'#type' => 'textarea',
			'#title' => t('Mailing List'),
			'#value' => $mail_list,
			'#rows' => 3,
			'#disabled' => TRUE,
		);
		$form['confirm_button'] = array(
			'#name' => 'confirm',
			'#type' => 'submit',
			'#value' => t('Confirm Sent Mail'),
			'#submit' => array('eve_recruitment_names_mail_form_confirm'),
		);
		$form['release_button'] = array(
			'#name' => 'release',
			'#type' => 'submit',
			'#prefix' => '&nbsp;',
			'#value' => t('Release Lock'),
			'#submit' => array('eve_recruitment_names_mail_form_release'),
		);
	} else {
		$add_names = t('<a href="@url">Add new names.</a>', array('@url' => url('recruitment/names/add')));
		$add_names_link = user_access('add new names') ? ' ' . $add_names : '';
		$form['no_data'] = array(
			'#type' => 'hidden',
			'#value' => NULL,
			'#prefix' => '<p>' . t('No names available for recruitment.') . $add_names_link . '</p>',
		);
	}
  return $form;
}

function eve_recruitment_names_mail_form_confirm($form, &$form_state) {
	global $user;
	$names = $form['names']['#value'];
	$updated = db_update('eve_recruitment')
		->fields(array(
			'mailed_by' => $user->uid,
			'mailed_date' => REQUEST_TIME,
			'locked_by' => NULL,
			'lock_time' => NULL,
		))
		->condition('name',$names,'IN')
		->execute();
	if ($updated) {
		drupal_set_message(t('Updated @num_updated names.', 
			array('@num_updated' => $updated)));
	}
	if (user_access('view statistics')) {
		$form_state['redirect'] = 'recruitment/summary';
	} else {
		$form_state['redirect'] = '<front>';
	}
}

function eve_recruitment_names_mail_form_release($form, &$form_state) {
	global $user;
	$names = $form['names']['#value'];
	$updated = db_update('eve_recruitment')
		->fields(array(
			'locked_by' => NULL,
			'lock_time' => NULL,
		))
		->condition('name',$names,'IN')
		->condition('locked_by',$user->uid)
		->execute();
	if ($updated) {
		drupal_set_message(t('Lock released from @updated names.', array('@updated' => $updated)));
	}
	if (user_access('view statistics')) {
		$form_state['redirect'] = 'recruitment/summary';
	} else {
		$form_state['redirect'] = '<front>';
	}
}

function eve_recruitment_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch($root_path){
    case 'recruitment/summary':
      $item = menu_get_item('recruitment/names/add');
      $item['title'] = t('Add Names');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
      $item = menu_get_item('recruitment/names/mail');
      $item['title'] = t('Send Mails');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
			break;
		case 'recruitment/names/add':
      $item = menu_get_item('recruitment/summary');
      $item['title'] = t('Summary');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
			break;
  }
}